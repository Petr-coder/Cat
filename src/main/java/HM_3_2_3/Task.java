package HM_3_2_3;

import HM_3_2_2.InvalidFormatException;

import java.util.Scanner;

import static Utils.StringUtils.validate;

/*
Цель задания
Научиться использовать механизм исключений и реализовать свой первый unit тест

Задание
Реализовать приложение, основной задачей которого является проверка введенных данных
(login, password и confirmPassword) на соответствие некоторым требованиям.
Данные считываются из консоли. Далее передаются в метод validate, результатом которого является true / false или
выброс AuthException.

Требования к входным данным
Login должен содержать только латинские буквы, цифры и знак подчеркивания.
Длина login должна быть не более 20 символов, если login не соответствует этим требованиям,
необходимо выбросить AuthException
Password должен содержать только латинские буквы, цифры и знак подчеркивания.
Длина password должна быть  не более 20 символов.
Также password и confirmPassword должны быть равны.
Если password не соответствует этим требованиям, необходимо выбросить AuthException.
AuthException - пользовательский класс исключение с двумя конструкторами – один по умолчанию,
второй принимает сообщение исключения и передает его в конструктор класса Exception.
Текст сообщения об ошибке придумайте самостоятельно.
Обработка исключений проводится внутри метода.
Метод возвращает true, если значения верны или false в другом случае.

Тестирование
Каждый разработчик покрывает свой код unit тестами, вместо того,
чтобы десятки раз запускать приложение с разными исходными данными,
выводить в консоль результат и визуально оценивать что все работает правильно.
Пример с пошаговым описанием как реализовывать тест https://javarush.ru/groups/posts/605-junit.
Раздел “Как подключить JUnit к проекту” пропустите, эта библиотека уже подключена с помощью maven.
Подсказка - для того, чтобы тестировать выбрасываемые исключения. используется аннотация
@Test(expected = AuthException .class).
Пример https://www.javatpoint.com/how-to-create-test-cases-for-exceptions-in-java

Что тестировать
Написать юнит тесты к методу validate, проверяя разные сценарии. Например:
Все данные введены корректно, метод возвращает true.
Какой-то из аргументов метода null (для каждого аргумента отдельный тест)
Все аргументы не null, но пароли не совпадают
Логин более 20 символов
и т.д. что придет в голову :)

Мы, разработчики, стараемся придумать побольше сценариев, чтобы быть уверенными в своем коде,
но часто щадим себя чтобы сдать работу. Есть отдельные команды тестировщиков, задача которых сломать код и
вот их фантазия по составлению тестовых кейсов должна быть максимальна …
Анекдот в тему https://pikabu.ru/story/testirovshchik_v_bare_3046939
 */
public class Task {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        for (; ; ) {
            String command = scanner.nextLine();

            try {
                String[] tokens = command.split("\\s+", 3);

                if (tokens.length != 3) {
                    throw new InvalidFormatException("Login, password or confirmPassword is missed");
                }

                if (validate(tokens[0], tokens[1], tokens[2])) {
                    System.out.println("Credentials are correct");
                    break;
                }
            } catch (InvalidFormatException | NullPointerException e) {
                System.out.println(e.getMessage());
            }


        }
    }
}
